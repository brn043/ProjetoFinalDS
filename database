create database projetofinal;
use projetofinal;

SET FOREIGN_KEY_CHECKS=0;

create table usuarios(
	id_usuario int auto_increment primary key,
    nome varchar(45) not null,
    email varchar(45) not null,
    senha varchar(45) not null,
    cpf varchar(15) unique not null,
    telefone varchar(20),
	acesso int default 2,
    dataNascimento date not null,
    endereco int,
    Foreign Key (endereco) references endereco(id_endereco)
);

insert into usuarios(nome, email, senha, cpf, telefone, acesso, dataNascimento) values ('admin', 'admin@gmail.com', '123', '123.456.789-10', '(43)91234-5678', '1', '2000-01-01');

create table endereco(
	id_endereco int auto_increment primary key,
    id_cliente int,
    Foreign key (id_cliente) references usuarios(id_usuario),
    cep char(10),
    rua varchar(45),
    numero varchar(10),
    bairro varchar(45),
    complemento tinytext
);

SET FOREIGN_KEY_CHECKS=1;

create table tamanhos(
	id_tamanho int auto_increment primary key,
	nome varchar(45)
);

INSERT INTO tamanhos (nome) VALUES ('P');
INSERT INTO tamanhos (nome) VALUES ('M');
INSERT INTO tamanhos (nome) VALUES ('G');
INSERT INTO tamanhos (nome) VALUES ('GG');

create table categoria(
	id_categoria int auto_increment primary key,
    nome varchar(45)
);

INSERT INTO categoria (nome) VALUES ('Camisetas'); 
INSERT INTO categoria (nome) VALUES ('Calça'); 
INSERT INTO categoria (nome) VALUES ('Bermudas'); 
INSERT INTO categoria (nome) VALUES ('Moletom'); 
INSERT INTO categoria (nome) VALUES ('Acessórios');

create table produtos(
	image varchar(45),
	id_produto int auto_increment primary key,
    nome varchar(45) not null,
    categoria int,
    Foreign key (categoria) references categoria(id_categoria),    
    quantidade int not null,
    tamanho int,
    Foreign key (tamanho) references tamanhos(id_tamanho),
    preco float not null,
    descricao tinytext
);

create table estoque(
	id_estoque int auto_increment primary key,
    nome varchar(45),
    tamanho int,
    Foreign key (tamanho) references tamanhos(id_tamanho),
    quantidade int
);

create table carrinho(
	image varchar(45),
	id_compra int auto_increment primary key,
    produto varchar(45) not null,
    preco float not null,
    quantidade int,
    tamanho varchar(5),
    total float not null,
    id_cliente int,
	Foreign key (id_cliente) references usuarios(id_usuario)
);

create table historico(
	image varchar(45),
    id_pedido int auto_increment primary key,
    produto varchar(45),
    preco float,
    quantidade int,
    total float,
    dataPedido date,
	situacao varchar(45),
    id_cliente int,
	Foreign key (id_cliente) references usuarios(id_usuario)
);

-- Procedimento para verificar se produto já existe antes de cadastrar

DELIMITER $

CREATE PROCEDURE inserir_produto(
    IN produto_image VARCHAR(45),
    IN produto_nome VARCHAR(45),
    IN produto_categoria INT,
    IN produto_quantidade INT,
    IN produto_tamanho INT,
    IN produto_preco FLOAT,
    IN produto_descricao TINYTEXT
)
BEGIN
    DECLARE id_produto_existente INT;
    DECLARE nome_produto_existente VARCHAR(45);
    DECLARE quantidade_existente INT;
    
    -- execução de um select na tabela de produtos
    SELECT id_produto, nome INTO id_produto_existente, nome_produto_existente
    FROM produtos
    WHERE nome = produto_nome AND categoria = produto_categoria;
    
    -- verificação se produto ja existe
    IF (id_produto_existente) IS NOT NULL THEN
    
		-- select na tabela de estoque para retornar a quantidade
        SELECT quantidade INTO quantidade_existente
        FROM estoque
        WHERE nome = nome_produto_existente AND tamanho = produto_tamanho;
        
        -- produto ja existe, atualiza quantidade do produto em estoque        
        IF (quantidade_existente) IS NOT NULL THEN
            UPDATE estoque
            SET quantidade = quantidade_existente + produto_quantidade
            WHERE nome = nome_produto_existente AND tamanho = produto_tamanho;
        ELSE
			-- produto nao existe, insere um novo produto
			
            INSERT INTO estoque (nome, tamanho, quantidade)
            VALUES (produto_nome, produto_tamanho, produto_quantidade);
        END IF;
        
        UPDATE produtos
        SET quantidade = quantidade + produto_quantidade
        WHERE nome = nome_produto_existente;
    ELSE
        INSERT INTO produtos (image, nome, categoria, quantidade, tamanho, preco, descricao)
        VALUES (produto_image, produto_nome, produto_categoria, produto_quantidade, produto_tamanho, produto_preco, produto_descricao);
        
        INSERT INTO estoque (nome, tamanho, quantidade)
        VALUES (produto_nome, produto_tamanho, produto_quantidade);
    END IF;
END;
$

DELIMITER ;

DELIMITER $

CREATE TRIGGER atualizar_quantidade_no_estoque
AFTER UPDATE ON produtos
FOR EACH ROW
BEGIN
    DECLARE quantidade_existente INT;
    
    -- Verifica se já existe o tamanho no estoque
    SELECT quantidade INTO quantidade_existente
    FROM estoque
    WHERE nome = NEW.nome AND tamanho = NEW.tamanho;
    
    IF (quantidade_existente) IS NOT NULL THEN
        UPDATE estoque
        SET quantidade = NEW.quantidade
        WHERE nome = NEW.nome AND tamanho = NEW.tamanho;
    ELSE
        INSERT INTO estoque (produto, nome, tamanho, quantidade)
        VALUES (NEW.id_produto, NEW.nome, NEW.tamanho, NEW.quantidade);
    END IF;
END;
$

DELIMITER ;

DELIMITER $

CREATE PROCEDURE verificar_estoque(
    IN p_nome_produto VARCHAR(45),
    IN p_nome_tamanho VARCHAR(45)
)
BEGIN
    SELECT 
        e.quantidade
    FROM 
        estoque e
    INNER JOIN 
        tamanhos t ON e.tamanho = t.id_tamanho
    WHERE 
        e.nome = p_nome_produto AND t.nome = p_nome_tamanho;
END;
$

DELIMITER ;

DELIMITER $

CREATE TRIGGER registrar_historico
AFTER DELETE ON carrinho
FOR EACH ROW
BEGIN
    DECLARE tamanho_id INT;
    
    IF OLD.id_cliente IS NOT NULL THEN
        
        SELECT id_tamanho INTO tamanho_id
        FROM tamanhos
        WHERE nome = OLD.tamanho;
    
        INSERT INTO historico (
            image, 
            produto, 
            preco, 
            quantidade, 
            total, 
            dataPedido, 
            situacao, 
            id_cliente
        ) VALUES (
            OLD.image, 
            OLD.produto, 
            OLD.preco, 
            OLD.quantidade, 
            OLD.total, 
            current_date, 
            'Em separação', 
            OLD.id_cliente
        );
    
        UPDATE estoque
        SET quantidade = quantidade - OLD.quantidade
        WHERE nome = OLD.produto AND tamanho = tamanho_id;
        
        UPDATE produtos
        SET quantidade = quantidade - OLD.quantidade
        WHERE nome = OLD.produto AND tamanho = tamanho_id;
        
        IF (SELECT quantidade FROM estoque WHERE nome = OLD.produto AND tamanho = tamanho_id) <= 0 THEN
            DELETE FROM estoque WHERE nome = OLD.produto AND tamanho = tamanho_id;
            DELETE FROM produtos WHERE nome = OLD.produto AND tamanho = tamanho_id;
        END IF;
    END IF;
END;
$

DELIMITER ;

